<?xml version="1.0"?>
<!--
 Copyright 2004-2005 The Apache Software Foundation.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

-->

<!--

This file builds log4cxx using Apache Ant (http://ant.apache.org)
and the C++ compilation tasks from http://ant-contrib.sourceforge.net.


-->
<project name="log4cxx" default="test-all">

<property name="debug" value="true"/>
<property name="src.dir" location="src"/>
<property name="include.dir" location="include"/>
<property name="build.dir" location="build"/>
<property name="examples.dir" location="examples"/>
<property name="tests.dir" location="tests"/>
<property name="version" value="0.9.8"/>
<taskdef resource="cpptasks.tasks"/>
<typedef resource="cpptasks.types"/>

<target name="usage">
        <echo>
        </echo>
</target>

<target name="os-detect">
        <condition property="is-unix" value="true">
             <os family="unix"/>
        </condition>
        <condition property="is-windows" value="true">
                <os family="windows"/>
        </condition>
</target>


<target name="win-init" depends="os-detect" if="is-windows">
    <property name="apr.dir" location="/apr-1"/>
    <property name="aprutil.dir" location="/apr-1"/>
    <property name="apr.include.dir" location="${apr.dir}/apr/include"/>
    <property name="apr.lib.name" value="apr-1"/>
    <property name="aprutil.lib.name" value="aprutil-1"/>
    <property name="apriconv.lib.name" value="apriconv"/>
        <condition property="apr.lib.dir" value="${apr.dir}/apr/LibD">
                <istrue value="${debug}"/>
        </condition>
    <property name="apr.lib.dir" location="${apr.dir}/apr/LibR"/>
    <property name="apriconv.lib.dir" location="${apr.lib.dir}"/>
        <property name="compiler" value="msvc"/>
        <condition property="lib-suffix" value="d">
            <istrue value="${debug}"/>
        </condition>
        <property name="lib-suffix" value=""/>
    <property name="cppunit.dir" location="/cppunit-1.10.2"/>
    <property name="cppunit.include.dir" location="${cppunit.dir}/include"/>
    <property name="cppunit.lib.dir" location="${cppunit.dir}/lib"/>
    <property name="cppunit.bin.dir" location="${cppunit.dir}/lib"/>
    <condition property="cppunit.lib.name" value="cppunitd">
        <istrue value="${debug}"/>
    </condition>
    <property name="cppunit.lib.name" value="cppunit"/>
</target>

<target name="unix-init" depends="os-detect" if="is-unix">
    <property name="apr.dir" location="/usr/local/apr"/>
    <property name="apr.include.dir" location="${apr.dir}/include/apr-1"/>
    <property name="aprutil.dir" location="${apr.dir}"/>
    <property name="aprutil.include.dir" location="${aprutil.dir}/include/apr-1"/>
    <property name="apriconv.dir" location="${apr.dir}"/>
    <property name="apriconv.include.dir" location="${apriconv.dir}/include"/>
    <property name="apr.lib.name" value="apr-1"/>
    <property name="aprutil.lib.name" value="aprutil-1"/>
    <property name="apriconv.lib.name" value="apriconv"/>
    <property name="apr.lib.dir" location="${apr.dir}/lib"/>
    <property name="aprutil.lib.dir" location="${aprutil.dir}/lib"/>
    <property name="apriconv.lib.dir" location="${apriconv.dir}/lib"/>
        <property name="compiler" value="gcc"/>
        <condition property="is-gcc" value="true">
            <or>
               <equals arg1="${compiler}" arg2="gcc"/>
               <equals arg1="${compiler}" arg2="g++"/>
            </or>
        </condition>

        <property name="lib-suffix" value="-${version}"/>

    <property name="cppunit.include.dir" location="/usr/local/include/cppunit"/>
    <property name="cppunit.lib.dir" location="/usr/local/lib"/>
    <property name="cppunit.bin.dir" location="/usr/local/lib"/>
    <property name="cppunit.lib.name" value="cppunit"/>

    <property name="expat.lib.name" value="expat"/>
</target>

<target name="init" depends="win-init, unix-init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="cbx"/>
        <mkdir dir="xcode"/>
        <mkdir dir="msvc"/>
        <condition property="obj.dir" value="${build.dir}/debug">
                <istrue value="${debug}"/>
        </condition>
        <property name="obj.dir" value="${build.dir}/release"/>
        <mkdir dir="${obj.dir}"/>
</target>

<target name="clean">
        <delete dir="${build.dir}"/>
        <delete>
            <fileset dir="${tests.dir}/src" includes="shortsocket*" excludes="*.cpp"/>
            <fileset dir="${tests.dir}/output"/>
        </delete>
</target>

<target name="config-check">
        <condition property="config-available" value="true">
                <available file="${include.dir}/log4cxx/config_auto.h"/>
        </condition>
</target>


<target name="unix-prep" depends="init, config-check"
        if="is-unix"
        unless="config-available">
</target>

<target name="check-config-msvc" depends="init" if="is-windows">
        <condition property="config-msvc-available" value="true">
                <available file="${include.dir}/log4cxx/config_msvc.h"/>
        </condition>
</target>

<target name="prep-config-msvc" depends="check-config-msvc" if="is-windows">
    <copy tofile="${include.dir}/log4cxx/config_msvc.h" file="${include.dir}/log4cxx/config_msvc.h.in"/>
        <replace file="${include.dir}/log4cxx/config_msvc.h" token="@VERSION@" value="${version}"/>
</target>


<target name="win-prep" depends="init, config-check, prep-config-msvc"
        if="is-windows"
        unless="config-available">
        <echo file="${include.dir}/log4cxx/config.h">#include "config_msvc.h"
</echo>
</target>

<target name="prep" depends="unix-prep, win-prep"/>



<target name="make-header-check" description="Generates a minimal C++ source using a specified header">
   <echo file="${header}.cpp" append="false">
#include "${header}"
#include "${header}"
</echo>
</target>

<target name="header-check" depends="prep"
    description="Checks that header files declare their dependencies">
        <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
        <delete dir="${build.dir}/header-check"/>
        <mkdir dir="${build.dir}/header-check"/>
        <copy todir="${build.dir}/header-check" overwrite="true">
             <fileset dir="${include.dir}" includes="**/*.h">
                    <exclude name="**/gnomexml.h"/>
                    <exclude name="**/tchar.h"/>
                    <exclude name="**/config_msvc.h"/>
                    <exclude name="log4cxx/rollingfileappender.h"/>
             </fileset>
        </copy>
        <foreach target="make-header-check" param="header">
                <path><fileset dir="${build.dir}/header-check" includes="**/*.h"/></path>
        </foreach>
        <cc objdir="${build.dir}/header-check"
                name="gcc"
                exceptions="true"
                subsystem="gui"
                optimize="none"
                multithreaded="true"
                relentless="true"
                debug="${debug}">
                <compilerarg value="-Weffc++"/>
                <compilerarg value="-Wall"/>
                <fileset dir="${build.dir}/header-check" includes="**/*.cpp"/>
                <includepath path="mock"/>
                <includepath path="include"/>
                <includepath path="${apr.include.dir}"/>
                <includepath path="${aprutil.include.dir}"/>
                <project outfile="${build.dir}/header-check/header-check"
                    type="cbuilderx" if="gen-cbx"/>
         </cc>
</target>


<target name="build-log4cxx" depends="prep" description="Build log4cxx shared library">
    <cc name="${compiler}"
                exceptions="true"
                outfile="${build.dir}/log4cxx${lib-suffix}"
                subsystem="console"
                multithreaded="true"
                outtype="shared"
                objdir="${obj.dir}"
                debug="${debug}">
        <fileset dir="${src.dir}" includes="*.cpp"/>
        <includepath path="${include.dir}"/>
        <includepath path="/usr/include/libxml2" if="is-unix"/>
        <includepath path="${apr.include.dir}"/>
        <includepath path="${aprutil.include.dir}"/>
        <includepath path="${apriconv.include.dir}"/>
        <defineset define="_USRDLL DLL_EXPORTS" if="is-windows"/>
        <defineset define="LOG4CXX"/>
        <defineset define="APR_DECLARE_STATIC"/>
        <defineset define="APU_DECLARE_STATIC"/>
        <defineset define="WIN32" if="is-windows"/>
        <libset libs="advapi32 odbc32 ws2_32" if="is-windows"/>
        <libset libs="stdc++" if="is-gcc"/>
        <libset libs="xml2" if="is-unix"/>
        <libset libs="${apr.lib.name}" dir="${apr.lib.dir}" if="apr.lib.dir"/>
        <libset libs="${apr.lib.name}" unless="apr.lib.dir"/>
        <libset libs="${aprutil.lib.name}" dir="${aprutil.lib.dir}" if="aprutil.lib.dir"/>
        <libset libs="${aprutil.lib.name}" unless="aprutil.lib.dir"/>

        <libset libs="${apriconv.lib.name}"
               dir="${apriconv.lib.dir}" if="apriconv.lib.dir"/>
        <libset libs="${apriconv.lib.name}"
                unless="apriconv.lib.dir"/>
        <syslibset libs="pthread" if="is-unix"/>
        <project outfile="cbx/log4cxx" type="cbuilderx" if="gen-cbx"/>
        <project outfile="msvc/log4cxx" type="msvc6" if="gen-dsw"/>
        <project outfile="xcode/log4cxx" type="xcode" if="gen-xcode"/>
    </cc>
</target>


<target name="build-example" description="Build example template task">
    <cc name="${compiler}"
                exceptions="true"
                outfile="${build.dir}/${example.name}"
                subsystem="console"
                multithreaded="true"
                outtype="executable"
                objdir="${obj.dir}"
                debug="${debug}">
        <fileset dir="${example.src.dir}" includes="${example.name}.cpp"/>
        <includepath path="${include.dir}"/>
        <includepath path="${apr.include.dir}"/>
        <libset libs="log4cxx${lib-suffix}" dir="${build.dir}"/>

        <libset libs="${apr.lib.name}" dir="${apr.lib.dir}" if="apr.lib.dir"/>
        <libset libs="${apr.lib.name}" unless="apr.lib.dir"/>
        <libset libs="${aprutil.lib.name}" dir="${aprutil.lib.dir}" if="aprutil.lib.dir"/>
        <libset libs="${aprutil.lib.name}" unless="aprutil.lib.dir"/>
        <libset libs="${apriconv.lib.name}"
               dir="${apriconv.lib.dir}" if="apriconv.lib.dir"/>
        <libset libs="${apriconv.lib.name}"
                unless="apriconv.lib.dir"/>
        <libset libs="stdc++" if="is-gcc"/>
        <project outfile="cbx/${example.name}" type="cbuilderx" if="gen-cbx"/>
        <project outfile="msvc/${example.name}" type="msvc6" if="gen-dsw"/>
        <project outfile="xcode/${example.name}" type="xcode" if="gen-xcode"/>
    </cc>
</target>

<target name="build-delayedloop" depends="build-log4cxx">
    <antcall target="build-example">
       <param name="example.src.dir" value="${examples.dir}"/>
       <param name="example.name" value="delayedloop"/>
    </antcall>
</target>

<target name="build-trivial" depends="build-log4cxx">
    <antcall target="build-example">
       <param name="example.src.dir" value="${examples.dir}"/>
       <param name="example.name" value="trivial"/>
    </antcall>
</target>

<target name="build-stream" depends="build-log4cxx">
    <antcall target="build-example">
       <param name="example.src.dir" value="${examples.dir}"/>
       <param name="example.name" value="stream"/>
    </antcall>
</target>

<target name="build-examples" depends="build-delayedloop, build-trivial, build-stream"/>

<target name="build-simplesocketserver" depends="build-log4cxx">
    <antcall target="build-example">
       <param name="example.src.dir" value="simplesocketserver"/>
       <param name="example.name" value="simplesocketserver"/>
    </antcall>
</target>

<target name="build-performance" depends="build-log4cxx">
    <cc name="${compiler}"
                exceptions="true"
                outfile="${build.dir}/performance"
                subsystem="console"
                multithreaded="true"
                outtype="executable"
                objdir="${obj.dir}"
                debug="${debug}">
        <fileset dir="performance" includes="**/*.cpp"/>
        <includepath path="${include.dir}"/>
        <includepath path="${apr.include.dir}"/>
        <libset libs="log4cxx${lib-suffix}" dir="${build.dir}"/>
        <libset libs="${apr.lib.name}" dir="${apr.lib.dir}" if="apr.lib.dir"/>
        <libset libs="${apr.lib.name}" unless="apr.lib.dir"/>
        <libset libs="${aprutil.lib.name}" dir="${aprutil.lib.dir}" if="aprutil.lib.dir"/>
        <libset libs="${aprutil.lib.name}" unless="aprutil.lib.dir"/>
        <libset libs="${apriconv.lib.name}"
               dir="${apriconv.lib.dir}" if="apriconv.lib.dir"/>
        <libset libs="${apriconv.lib.name}"
                unless="apriconv.lib.dir"/>
        <libset libs="stdc++" if="is-gcc"/>
        <project outfile="cbx/performance" type="cbuilderx" if="gen-cbx"/>
        <project outfile="msvc/performance" type="msvc6" if="gen-dsw"/>
        <project outfile="xcode/performance" type="xcode" if="gen-xcode"/>
    </cc>
</target>

<target name="build-shortsocketserver" depends="build-log4cxx"
   description="builds a socket server used by unit tests">

    <cc name="${compiler}"
                exceptions="true"
                outfile="${tests.dir}/src/shortsocketserver"
                subsystem="console"
                multithreaded="true"
                outtype="executable"
                objdir="${obj.dir}"
                debug="${debug}">
        <fileset dir="${tests.dir}/src">
           <include name="shortsocketserver.cpp"/>
           <include name="xml/xlevel.cpp"/>
        </fileset>
        <includepath path="${cppunit.include.dir}"/>
        <includepath path="${include.dir}"/>
        <includepath path="${apr.include.dir}"/>
        <libset libs="log4cxx${lib-suffix}" dir="${build.dir}"/>
        <libset libs="${apr.lib.name}" dir="${apr.lib.dir}" if="apr.lib.dir"/>
        <libset libs="${apr.lib.name}" unless="apr.lib.dir"/>
        <libset libs="${aprutil.lib.name}" dir="${aprutil.lib.dir}" if="aprutil.lib.dir"/>
        <libset libs="${aprutil.lib.name}" unless="aprutil.lib.dir"/>
        <libset libs="${apriconv.lib.name}"
               dir="${apriconv.lib.dir}" if="apriconv.lib.dir"/>
        <libset libs="${apriconv.lib.name}"
                unless="apriconv.lib.dir"/>
        <libset libs="${expat.lib.name}" dir="${expat.lib.dir}" if="expat.lib.dir"/>
        <libset libs="${expat.lib.name}" unless="expat.lib.dir" if="expat.lib.name"/>
        <libset libs="stdc++" if="is-gcc"/>
        <libset libs="${cppunit.lib.name}" dir="${cppunit.lib.dir}"/>
        <project outfile="cbx/shortsocketserver" type="cbuilderx" if="gen-cbx"/>
        <project outfile="msvc/shortsocketserver" type="msvc6" if="gen-dsw"/>
        <project outfile="xcode/shortsocketserver" type="xcode" if="gen-xcode"/>
    </cc>

</target>


<target name="build-unittest" depends="build-shortsocketserver">
    <cc name="${compiler}"
                exceptions="true"
                outfile="${build.dir}/log4cxx-test"
                subsystem="console"
                multithreaded="true"
                outputfileproperty="log4cxx-test.exe"
                outtype="executable"
                objdir="${obj.dir}"
                debug="${debug}">
        <fileset dir="${tests.dir}/src" includes="**/*.cpp">
             <exclude name="shortsocketserver.cpp"/>
             <exclude name="defaultinit/testcase2.cpp"/>
             <exclude name="defaultinit/testcase3.cpp"/>
             <exclude name="defaultinit/testcase4.cpp"/>
        </fileset>
        <includepath path="${cppunit.include.dir}"/>
        <includepath path="${include.dir}"/>
        <includepath path="${apr.include.dir}"/>
                <defineset define="APR_DECLARE_STATIC"/>
                <defineset define="WIN32" if="is-windows"/>
        <libset libs="log4cxx${lib-suffix}" dir="${build.dir}"/>
        <libset libs="${apr.lib.name}" dir="${apr.lib.dir}" if="apr.lib.dir"/>
        <libset libs="${apr.lib.name}" unless="apr.lib.dir"/>
        <libset libs="${aprutil.lib.name}" dir="${aprutil.lib.dir}" if="aprutil.lib.dir"/>
        <libset libs="${aprutil.lib.name}" unless="aprutil.lib.dir"/>
        <libset libs="${apriconv.lib.name}"
               dir="${apriconv.lib.dir}" if="apriconv.lib.dir"/>
        <libset libs="${apriconv.lib.name}" unless="apriconv.lib.dir"/>
        <libset libs="${expat.lib.name}" dir="${expat.lib.dir}" if="expat.lib.dir"/>
        <libset libs="${expat.lib.name}" unless="expat.lib.dir" if="expat.lib.name"/>
        <libset libs="stdc++" if="is-gcc"/>
        <libset libs="${cppunit.lib.name}" dir="${cppunit.lib.dir}"/>
                <syslibset libs="Ws2_32 ws2 advapi32" if="is-windows"/>
        <project outfile="cbx/log4cxx-test" type="cbuilderx" if="gen-cbx"/>
        <project outfile="msvc/log4cxx-test" type="msvc6" if="gen-dsw"/>
        <project outfile="xcode/log4cxx-test" type="xcode" if="gen-xcode"/>
    </cc>

    <!--  testcase3 checks default configuration so must be run in isolation -->
    <cc name="${compiler}"
                exceptions="true"
                outfile="${build.dir}/log4cxx-testcase3"
                subsystem="console"
                multithreaded="true"
                outputfileproperty="log4cxx-testcase3.exe"
                outtype="executable"
                objdir="${obj.dir}"
                debug="${debug}">
        <fileset dir="${tests.dir}/src">
             <include name="main.cpp"/>
             <include name="defaultinit/testcase3.cpp"/>
        </fileset>
        <includepath path="${cppunit.include.dir}"/>
        <includepath path="${include.dir}"/>
        <includepath path="${apr.include.dir}"/>
                <defineset define="APR_DECLARE_STATIC"/>
                <defineset define="WIN32" if="is-windows"/>
                <defineset define="APR_DECLARE_STATIC"/>
        <libset libs="log4cxx${lib-suffix}" dir="${build.dir}"/>
        <libset libs="${apr.lib.name}" dir="${apr.lib.dir}" if="apr.lib.dir"/>
        <libset libs="${apr.lib.name}" unless="apr.lib.dir"/>
        <libset libs="${aprutil.lib.name}" dir="${aprutil.lib.dir}" if="aprutil.lib.dir"/>
        <libset libs="${aprutil.lib.name}" unless="aprutil.lib.dir"/>
        <libset libs="${apriconv.lib.name}"
               dir="${apriconv.lib.dir}" if="apriconv.lib.dir"/>
        <libset libs="${apriconv.lib.name}" unless="apriconv.lib.dir"/>
        <libset libs="${expat.lib.name}" dir="${expat.lib.dir}" if="expat.lib.dir"/>
        <libset libs="${expat.lib.name}" unless="expat.lib.dir" if="expat.lib.name"/>
        <libset libs="stdc++" if="is-gcc"/>
        <libset libs="${cppunit.lib.name}" dir="${cppunit.lib.dir}"/>
                <syslibset libs="Ws2_32 ws2 advapi32" if="is-windows"/>
        <project outfile="cbx/log4cxx-testcase3" type="cbuilderx" if="gen-cbx"/>
        <project outfile="msvc/log4cxx-testcase3" type="msvc6" if="gen-dsw"/>
        <project outfile="xcode/log4cxx-testcase3" type="xcode" if="gen-xcode"/>
    </cc>

    <!--  testcase4 checks default configuration so must be run in isolation -->
    <cc name="${compiler}"
                exceptions="true"
                outfile="${build.dir}/log4cxx-testcase4"
                subsystem="console"
                multithreaded="true"
                outputfileproperty="log4cxx-testcase4.exe"
                outtype="executable"
                objdir="${obj.dir}"
                debug="${debug}">
        <fileset dir="${tests.dir}/src">
             <include name="main.cpp"/>
             <include name="defaultinit/testcase4.cpp"/>
        </fileset>
        <includepath path="${cppunit.include.dir}"/>
        <includepath path="${include.dir}"/>
        <includepath path="${apr.include.dir}"/>
                <defineset define="APR_DECLARE_STATIC"/>
                <defineset define="WIN32" if="is-windows"/>
                <defineset define="APR_DECLARE_STATIC"/>
        <libset libs="log4cxx${lib-suffix}" dir="${build.dir}"/>
        <libset libs="${apr.lib.name}" dir="${apr.lib.dir}" if="apr.lib.dir"/>
        <libset libs="${apr.lib.name}" unless="apr.lib.dir"/>
        <libset libs="${aprutil.lib.name}" dir="${aprutil.lib.dir}" if="aprutil.lib.dir"/>
        <libset libs="${aprutil.lib.name}" unless="aprutil.lib.dir"/>
        <libset libs="${apriconv.lib.name}"
               dir="${apriconv.lib.dir}" if="apriconv.lib.dir"/>
        <libset libs="${apriconv.lib.name}" unless="apriconv.lib.dir"/>
        <libset libs="${expat.lib.name}" dir="${expat.lib.dir}" if="expat.lib.dir"/>
        <libset libs="${expat.lib.name}" unless="expat.lib.dir" if="expat.lib.name"/>
        <libset libs="stdc++" if="is-gcc"/>
        <libset libs="${cppunit.lib.name}" dir="${cppunit.lib.dir}"/>
                <syslibset libs="Ws2_32 ws2 advapi32" if="is-windows"/>
        <project outfile="cbx/log4cxx-testcase4" type="cbuilderx" if="gen-cbx"/>
        <project outfile="msvc/log4cxx-testcase4" type="msvc6" if="gen-dsw"/>
        <project outfile="xcode/log4cxx-testcase4" type="xcode" if="gen-xcode"/>
    </cc>


</target>

<target name="build-standalone-unittest"
    depends="build-shortsocketserver"
    description="Build a single project that is easier to debug in IDEs">
    <mkdir dir="${obj.dir}/standalone"/>
    <cc name="${compiler}"
                exceptions="true"
                outfile="${build.dir}/log4cxx-standalone-test"
                subsystem="console"
                multithreaded="true"
                outputfileproperty="log4cxx-standalone-test.exe"
                outtype="executable"
                objdir="${obj.dir}/standalone"
                debug="${debug}">
        <fileset dir="${src.dir}" includes="*.cpp"/>
        <fileset dir="${tests.dir}/src" includes="**/*.cpp">
             <exclude name="shortsocketserver.cpp"/>
             <exclude name="defaultinit/testcase3.cpp"/>
        </fileset>
        <includepath path="${cppunit.include.dir}"/>
        <includepath path="${include.dir}"/>
        <includepath path="${apr.include.dir}"/>
                <defineset define="APR_DECLARE_STATIC"/>
                <defineset define="WIN32" if="is-windows"/>
        <libset libs="${apr.lib.name}" dir="${apr.lib.dir}" if="apr.lib.dir"/>
        <libset libs="${apr.lib.name}" unless="apr.lib.dir"/>
        <libset libs="${aprutil.lib.name}" dir="${aprutil.lib.dir}" if="aprutil.lib.dir"/>
        <libset libs="${aprutil.lib.name}" unless="aprutil.lib.dir"/>
        <libset libs="${apriconv.lib.name}"
               dir="${apriconv.lib.dir}" if="apriconv.lib.dir"/>
        <libset libs="${apriconv.lib.name}" unless="apriconv.lib.dir"/>
        <libset libs="stdc++" if="is-gcc"/>
        <libset libs="${cppunit.lib.name}" dir="${cppunit.lib.dir}"/>
        <libset libs="${expat.lib.name}" dir="${expat.lib.dir}" if="expat.lib.dir"/>
        <libset libs="${expat.lib.name}" unless="expat.lib.dir" if="expat.lib.name"/>

        <includepath path="${include.dir}"/>
        <includepath path="/usr/include/libxml2" if="is-unix"/>
        <includepath path="${apr.include.dir}"/>
        <defineset define="LOG4CXX"/>
        <libset libs="advapi32 odbc32 ws2_32" if="is-windows"/>
        <libset libs="xml2" if="is-unix"/>


        <project outfile="cbx/log4cxx-standalone-test" type="cbuilderx" if="gen-cbx"/>
        <project outfile="msvc/log4cxx-standalone-test" type="msvc6" if="gen-dsw"/>
        <project outfile="xcode/log4cxx-standalone-test" type="xcode" if="gen-xcode"/>
    </cc>
</target>

<target name="build-all" depends="build-examples, build-unittest,
     build-simplesocketserver, build-performance"/>

<target name="run-unittest" depends="build-unittest">
    <property environment="env"/>
    <mkdir dir="${tests.dir}/output"/>
    <exec executable="${log4cxx-test.exe}" dir="${tests.dir}"
              failonerror="true">
            <env key="LD_LIBRARY_PATH"
                   value="${build.dir}:${cppunit.bin.dir}:${apr.lib.dir}:${env.LD_LIBRARY_PATH}"/>
            <env key="DYLD_LIBRARY_PATH"
                   value="${build.dir}:${cppunit.bin.dir}:${apr.lib.dir}:${env.DYLD_LIBRARY_PATH}"/>
            <env key="Path"
                   value="${build.dir};${env.Path}"/>
    </exec>

    <!--  test use of log4j.configuration -->
    <property name="defaultInit3.properties"
         location="${tests.dir}/input/defaultInit3.properties"/>
    <exec executable="${log4cxx-testcase3.exe}" dir="${tests.dir}"
              failonerror="true">
            <env key="LD_LIBRARY_PATH"
                   value="${build.dir}:${cppunit.bin.dir}:${apr.lib.dir}:${env.LD_LIBRARY_PATH}"/>
            <env key="DYLD_LIBRARY_PATH"
                   value="${build.dir}:${cppunit.bin.dir}:${apr.lib.dir}:${env.DYLD_LIBRARY_PATH}"/>
            <env key="log4j.configuration"
                   value="${defaultInit3.properties}"/>
    </exec>

    <!--  test of LOG4CXX_CONFIGURATION -->
    <exec executable="${log4cxx-testcase3.exe}" dir="${tests.dir}"
              failonerror="true">
            <env key="LD_LIBRARY_PATH"
                   value="${build.dir}:${cppunit.bin.dir}:${apr.lib.dir}:${env.LD_LIBRARY_PATH}"/>
            <env key="DYLD_LIBRARY_PATH"
                   value="${build.dir}:${cppunit.bin.dir}:${apr.lib.dir}:${env.DYLD_LIBRARY_PATH}"/>
            <env key="LOG4CXX_CONFIGURATION"
                   value="${defaultInit3.properties}"/>
    </exec>

    <!--  test of log4j.properties -->
    <mkdir dir="${build.dir}/output"/>
    <delete file="${build.dir}/log4*.properties"/>
    <delete file="${build.dir}/log4*.xml"/>
    <copy tofile="${build.dir}/log4j.properties"
       file="${defaultInit3.properties}" overwrite="true"/>
    <exec executable="${log4cxx-testcase3.exe}" dir="${build.dir}"
              failonerror="true">
            <env key="DYLD_LIBRARY_PATH"
                   value="${build.dir}:${cppunit.bin.dir}:${apr.lib.dir}:${env.DYLD_LIBRARY_PATH}"/>
            <env key="LD_LIBRARY_PATH"
                   value="${build.dir}:${cppunit.bin.dir}:${apr.lib.dir}:${env.LD_LIBRARY_PATH}"/>
    </exec>

    <!-- modify log4j.properties so if it has precedence the test fails  -->
    <replace file="${build.dir}/log4j.properties" token="D3" value="D4"/>
    <copy tofile="${build.dir}/log4cxx.properties"
       file="${defaultInit3.properties}"/>
    <exec executable="${log4cxx-testcase3.exe}" dir="${build.dir}"
              failonerror="true">
            <env key="DYLD_LIBRARY_PATH"
                   value="${build.dir}:${cppunit.bin.dir}:${apr.lib.dir}:${env.DYLD_LIBRARY_PATH}"/>
            <env key="LD_LIBRARY_PATH"
                   value="${build.dir}:${cppunit.bin.dir}:${apr.lib.dir}:${env.LD_LIBRARY_PATH}"/>
    </exec>

    <delete file="${build.dir}/log4cxx.properties"/>
    <delete file="${build.dir}/log4j.properties"/>

    <property name="defaultInit.xml"
         location="${tests.dir}/input/xml/defaultInit.xml"/>
    <copy tofile="${build.dir}/log4j.xml"
       file="${defaultInit.xml}"/>
    <copy todir="${build.dir}" file="${tests.dir}/input/xml/log4j.dtd"/>
    <exec executable="${log4cxx-testcase4.exe}" dir="${build.dir}"
              failonerror="true">
            <env key="LD_LIBRARY_PATH"
                   value="${build.dir}:${cppunit.bin.dir}:${apr.lib.dir}:${env.LD_LIBRARY_PATH}"/>
            <env key="DYLD_LIBRARY_PATH"
                   value="${build.dir}:${cppunit.bin.dir}:${apr.lib.dir}:${env.DYLD_LIBRARY_PATH}"/>
    </exec>

</target>

<target name="run-standalone-unittest" depends="build-standalone-unittest">
    <property environment="env"/>
    <mkdir dir="${tests.dir}/output"/>
    <exec executable="${log4cxx-standalone-test.exe}" dir="${tests.dir}"
              failonerror="true">
            <env key="DYLD_LIBRARY_PATH"
                   value="${build.dir}:${cppunit.bin.dir}:${apr.lib.dir}:${env.DYLD_LIBRARY_PATH}"/>
            <env key="LD_LIBRARY_PATH"
                   value="${build.dir}:${cppunit.bin.dir}:${apr.lib.dir}:${env.LD_LIBRARY_PATH}"/>
            <env key="Path"
                   value="${build.dir};${env.Path}"/>
    </exec>
</target>

<target name="test-all" depends="build-log4cxx, run-unittest"/>

<target name="gump" depends="build-log4cxx, header-check, test-all"/>

</project>
