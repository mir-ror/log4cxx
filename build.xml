<?xml version="1.0"?>
<!DOCTYPE project [
<!ENTITY libsets '
        <libset libs="${aprutil.lib.name}${lib-suffix}" dir="${aprutil.lib.dir}" if="aprutil.lib.dir"/>
        <libset libs="${aprutil.lib.name}${lib-suffix}" unless="aprutil.lib.dir"/>
        <libset libs="${apr.lib.name}${lib-suffix}" dir="${apr.lib.dir}" if="apr.lib.dir"/>
        <libset libs="${apr.lib.name}${lib-suffix}" unless="apr.lib.dir"/>
        <libset libs="iconv" if="has-iconv"/>
        <libset libs="pthread" if="is-unix"/>
        <libset libs="expat" if="has-expat"/>
        <syslibset libs="advapi32 odbc32 ws2_32 mswsock" if="is-windows"/>
        <syslibset libs="stdc++" if="is-gcc"/>
        <syslibset libs="cw32mt" if="is-bcc"/>
'>]>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

-->

<!--
This file builds log4cxx using Apache Ant (http://ant.apache.org)
and the C++ compilation tasks from http://ant-contrib.sourceforge.net.


-->
<project name="log4cxx" default="check">

<property environment="env"/>
<!-- The build.properties file defines the parth to local jar files -->
<property file="build.properties"/>

<property name="debug" value="true"/>
<property name="base.dir" location="."/>
<property name="src.dir" location="${base.dir}/src/main/cpp"/>
<property name="include.dir" location="${base.dir}/src/main/include"/>
<property name="build.dir" location="${base.dir}/target"/>
<property name="lib.dir" location="${build.dir}/lib"/>
<property name="examples.dir" location="${base.dir}/src/examples/cpp"/>
<property name="tests.dir" location="${base.dir}/src/test"/>
<property name="tests.cpp.dir" location="${tests.dir}/cpp"/>
<property name="tests.resources.dir" location="${tests.dir}/resources"/>
<property name="tests.output.dir" location="${tests.resources.dir}/output"/>
<property name="performance.dir" location="${base.dir}/src/performance"/>
<property name="performance.src.dir" location="${performance.dir}/cpp"/>
<property name="performance.include.dir" location="${performance.dir}/include"/>

<property name="doxygen.exe" value="doxygen"/>
<property name="enable_dot" value="YES"/>

<property name="version" value="0.10.0"/>
<property name="rtti" value="false"/>
<property name="optimize" value="none"/>
<property name="lib.type" value="shared"/>
<property name="has.wchar_t" value="1"/>
<property name="has.wcout" value="1"/>

<property name="apache.mirror" value="http://archive.apache.org/dist"/>
<property name="cppunit.mirror" value="http://easynews.dl.sourceforge.net/sourceforge"/>

<property name="apache.dist" value="http://archive.apache.org/dist"/>
<!-- property name="apache.doc_dest" value="/www/logging.apache.org/log4cxx"/ -->
<property name="apache.doc_dest" value="/home/${apache.user}/public_html/test"/>


<property name="apr.version" value="1.2.9"/>
<property name="apr.lib.name" value="apr-1"/>
<property name="apr.lib.type" value="static"/>

<property name="aprutil.version" value="1.2.8"/>
<property name="aprutil.lib.name" value="aprutil-1"/>
<property name="aprutil.lib.type" value="static"/>


<property name="cppunit.version" value="1.10.2"/>
<property name="cppunit.lib.name" value="cppunit"/>
<property name="cppunit.lib.type" value="static"/>

<property name="svnrepo.url" value="https://svn.apache.org/repos/asf"/>
<property name="svnsite.url" value="${svnrepo.url}/logging/site/trunk/docs/log4cxx"/>
<available property="svn-available" file="target/site-deploy/.svn"/>


<taskdef resource="cpptasks.tasks"/>
<typedef resource="cpptasks.types"/>



<target name="usage" description="Describes usage of the build script">
        <echo>
Ant build file for log4cxx

Common invocations:

> ant

Builds and tests log4cxx.  Will download and build
apr, apr-util, apr-iconv and cppunit from source.

> ant -Dapr.dir=/usr/local/lib -Dcppunit.dir=/usr/lib

Builds and tests log4cxx using installed APR and cppunit

> ant -p

Displays available targets

> ant build-projects-vc6

Builds Microsoft Visual Studio projects.
-xcode and -cbx for Apple Xcode and Borland CBuilderX for Linux
respectively.

Common command line options:

-Ddebug=[true|false]
-Doptimize=[speed|size|none]
-Dversion=n.n.n
-Dlib.type=[shared|static]
-Dapr.dir=PATH
-Daprutil.dir=PATH
-Dhas.wchar_t=[0|1] (default=1)
-Dhas.wcout=[0|1] (default=1)
-Dlogchar=[utf-8|wchar_t|cfstring] (default=wchar_t)

</echo>
</target>

<target name="os-detect">
        <condition property="is-mac" value="true">
             <and>
                 <os family="mac"/>
                 <not><isset property="is-windows"/></not>
             </and>
        </condition>
        <condition property="is-unix" value="true">
             <or>
                  <isset property="is-mac"/>
                  <equals arg1="${os.family}" arg2="cygwin"/>
                  <and>
                     <os family="unix"/>
                     <not><isset property="is-windows"/></not>
                  </and>
             </or>
        </condition>
        <condition property="is-windows" value="true">
             <and>
                <os family="windows"/>
                <not><isset property="is-unix"/></not>
             </and>
        </condition>
        <condition property="os.family" value="windows">
            <isset property="is-windows"/>
        </condition>
        <condition property="os.family" value="unix">
            <isset property="is-unix"/>
        </condition>


</target>


<target name="win-init" depends="os-detect" if="is-windows">
    <property name="lib.prefix" value=""/>
    <property name="lib.extension" value=".lib"/>
    <property name="project.type" value="msvc6"/>
    <property name="project.dir" value="msvc"/>
    <property name="compiler" value="msvc"/>

    <!-- Default value for logchar on windows -->
    <property name="logchar" value="wchar_t"/>

    <condition property="is-bcc" value="true">
        <or>
           <equals arg1="${compiler}" arg2="bcc"/>
        </or>
    </condition>

    <condition property="is-mingw" value="true">
        <isset property="is-gcc"/>
    </condition>
</target>

<target name="mac-init" depends="os-detect" if="is-mac">
    <property name="project.type" value="xcode"/>
    <property name="project.dir" value="xcode"/>
    <property name="has-iconv" value="true"/>

    <!-- Default value for logchar on mac -->
    <property name="logchar" value="wchar_t"/>

    <condition property="mac_osx_wchar_not_supported_yet" value="true">
        <equals arg1="${has.wchar_t}" arg2="1"/>
    </condition>
    <fail if="mac_osx_wchar_not_supported_yet">

wchar_t is not supported in Mac OS/X yet,
cppunit fails to link
LogString may become CFString, see bug LOGCXX-85

specify -Dhas.wchar_t=0 on Ant command line for UTF-8 build as work-around
</fail>
</target>


<target name="unix-init" depends="mac-init" if="is-unix">

    <property name="compiler" value="gcc"/>

    <property name="lib.prefix" value="lib"/>
    <property name="lib.extension" value=".a"/>
    <property name="project.type" value="cbuilderx"/>
    <property name="project.dir" value="cbx"/>
    <property name="compiler" value="g++"/>
    <property name="lib-suffix" value=""/>

    <!-- Default value for logchar on Unix -->
    <property name="logchar" value="utf-8"/>

    <condition property="has-expat" value="true">
         <not><isset property="is-mac"/></not>
    </condition>
    <condition property="is-cygwin" value="true">
        <os family="windows"/>
    </condition>
</target>




<target name="init" depends="win-init, unix-init">
        <available classname="net.sf.antcontrib.cpptasks.CCTask" property="cctask-available"/>
        <fail unless="cctask-available">cpptasks required

Use CVS HEAD or Feb 2005 or later release from
http://ant-contrib.sourceforge.net.
</fail>

        <available classname="net.sf.antcontrib.cpptasks.ide.ProjectDef"
            property="cctask-project-available"/>
        <!-- fail unless="cctask-project-available">later version of cpptasks required

Required features not present in cpptasks releases prior to Feb 2005</fail -->

        <mkdir dir="${build.dir}"/>

        <condition property="is-gcc" value="true">
            <or>
               <equals arg1="${compiler}" arg2="gcc"/>
               <equals arg1="${compiler}" arg2="g++"/>
            </or>
        </condition>

         <condition property="pic-option" value="-fPIC">
            <and>
                     <isset property="is-gcc"/>
                     <istrue value="${use-pic}"/>
            </and>
         </condition>


        <condition property="is-debug" value="true">
                <istrue value="${debug}"/>
        </condition>

        <condition property="logchar_type" value="utf-8">
                <not><equals arg1="${has.wchar_t}" arg2="1"/></not>
        </condition>

        <condition property="logchar_type" value="${logchar}">
                <equals arg1="${has.wchar_t}" arg2="1"/>
        </condition>

        <condition property="debug.release" value="debug">
            <isset property="is-debug"/>
        </condition>
        <property name="debug.release" value="release"/>

        <condition property="apr.include.dir" value="${apr.dir}/include/apr-1">
            <isset property="apr.dir"/>
        </condition>
        <condition property="apr.lib.dir" value="${apr.dir}/lib">
            <isset property="apr.dir"/>
        </condition>

        <condition property="aprutil.dir" value="${apr.dir}">
            <isset property="apr.dir"/>
        </condition>
        <condition property="aprutil.include.dir" value="${aprutil.dir}/include/apr-1">
            <isset property="aprutil.dir"/>
        </condition>
        <condition property="aprutil.lib.dir" value="${aprutil.dir}/lib">
            <isset property="aprutil.dir"/>
        </condition>

        <condition property="cppunit.include.dir" value="${cppunit.dir}/include">
            <isset property="cppunit.dir"/>
        </condition>
        <condition property="cppunit.lib.dir" value="${cppunit.dir}/lib">
            <isset property="cppunit.dir"/>
        </condition>

        <condition property="lib-suffix" value="d">
            <isset property="is-debug"/>
        </condition>
        <property name="lib-suffix" value=""/>

        <available property="apr-available"
           file="${apr.lib.dir}/${lib.prefix}apr-1${lib-suffix}${lib.extension}"/>
        <available property="aprutil-available"
           file="${aprutil.lib.dir}/${lib.prefix}aprutil-1${lib-suffix}${lib.extension}"/>
        <available property="cppunit-available"
           file="${cppunit.lib.dir}/${lib.prefix}cppunit${lib-suffix}${lib.extension}"/>


        <available property="apr-src-expanded" file="${lib.dir}/apr-${apr.version}"/>
        <available property="aprutil-src-expanded" file="${lib.dir}/apr-util-${aprutil.version}"/>
        <available property="cppunit-src-expanded" file="${lib.dir}/cppunit-${cppunit.version}"/>

        <condition property="cppunit-src-available" value="">
          <or>
            <isset property="cppunit-src-expanded"/>
            <available file="${lib.dir}/cppunit-${cppunit.version}.tar.gz"/>
          </or>
        </condition>

        <condition property="is-static" value="true">
              <equals arg1="${lib.type}" arg2="static"/>
        </condition>

                <condition property="apr-static" value="true">
                        <equals arg1="${apr.lib.type}" arg2="static"/>
                </condition>

                <condition property="aprutil-static" value="true">
                        <equals arg1="${aprutil.lib.type}" arg2="static"/>
                </condition>

                <condition property="cppunit-static" value="true">
                        <equals arg1="${cppunit.lib.type}" arg2="static"/>
                </condition>


        <condition property="executable.dir" value="${build.dir}/debug">
                <isset property="is-debug"/>
        </condition>
        <property name="executable.dir" value="${build.dir}/release"/>

        <property name="log4cxx.lib.dir" value="${executable.dir}/${lib.type}"/>
        <mkdir dir="${log4cxx.lib.dir}"/>


        <property name="projectsOnly" value="false"/>
</target>

<target name="clean" depends="init" description="Removes built files">
        <delete dir="${build.dir}"/>
        <delete>
            <fileset dir="${include.dir}/log4cxx" includes="**/log4cxx.h"/>
        </delete>
        
</target>

<target name="config-check" depends="os-detect">
        <condition property="config-available" value="true">
                <and>
                    <available file="${include.dir}/log4cxx/log4cxx.h"/>
                    <available file="${include.dir}/log4cxx/private/log4cxx_private.h"/>
                </and>
        </condition>
</target>


<target name="unix-configure"
        depends="config-check"
        if="is-unix"
        unless="config-available">

        <copy tofile="${include.dir}/log4cxx/log4cxx.h"
              file="${include.dir}/log4cxx/log4cxx.h.in"/>
        <copy tofile="${include.dir}/log4cxx/private/log4cxx_private.h"
              file="${include.dir}/log4cxx/private/log4cxx_private.h.in"/>
</target>

<target name="win-configure"
        depends="config-check"
        if="is-windows"
        unless="config-available">
        <copy tofile="${include.dir}/log4cxx/log4cxx.h"
              file="${include.dir}/log4cxx/log4cxx.hw"/>
        <copy tofile="${include.dir}/log4cxx/private/log4cxx_private.h"
              file="${include.dir}/log4cxx/private/log4cxx_private.hw"/>
</target>


<target name="configure" depends="init,
                                  unix-configure,
                                  win-configure">
    <echo message="Configuring with has.wchar_t=${has.wchar_t}"/>
    <echo message="Configuring with has.wcout=${has.wcout}"/>
    <echo message="Configuring with logchar_type=${logchar_type}" />

    <condition property="logchar_is_utf8" value="1">
       <equals arg1="${logchar_type}" arg2="utf-8"/>
    </condition>
    <property name="logchar_is_utf8" value="0"/>

    <condition property="logchar_is_cfstring" value="1">
       <equals arg1="${logchar_type}" arg2="cfstring"/>
    </condition>
    <property name="logchar_is_cfstring" value="0"/>

    <condition property="logchar_is_wchar" value="1">
       <equals arg1="${logchar_type}" arg2="wchar_t"/>
    </condition>
    <property name="logchar_is_wchar" value="0"/>

    <replaceregexp file="${include.dir}/log4cxx/log4cxx.h"
       match="@LOGCHAR_IS_CFSTRING@"
       replace="${logchar_is_cfstring}"/>

    <replaceregexp file="${include.dir}/log4cxx/log4cxx.h"
       match="@LOGCHAR_IS_UTF8@"
       replace="${logchar_is_utf8}"/>

    <replaceregexp file="${include.dir}/log4cxx/log4cxx.h"
       match="@LOGCHAR_IS_WCHAR@"
       replace="${logchar_is_wchar}"/>

    <replaceregexp file="${include.dir}/log4cxx/log4cxx.h"
       match="@HAS_WCHAR_T@"
       replace="${has.wchar_t}"/>

    <replaceregexp file="${include.dir}/log4cxx/log4cxx.h"
       match="@HAS_STD_WCOUT@"
       replace="${has.wcout}"/>

    <!-- The MS Windows template for log4cxx_private.h contains a hard coded
         "0" for LOG4CXX_HAVE_SYSLOG. Therefore the following replacement
         only applies to the UNIX template. -->
    <replaceregexp file="${include.dir}/log4cxx/private/log4cxx_private.h"
       match="@HAS_SYSLOG@"
       replace="1"/>
</target>

<target name="build-apr" depends="init" unless="apr-available">
    <property name="apr.dir" location="src/apr/apr-${apr.version}"/>
    <property name="apr.include.dir" location="${apr.dir}/include"/>
    <property name="apr.lib.dir" location="${executable.dir}/${apr.lib.type}"/>

    <ant antfile="src/apr/ant/build.xml" target="build" inheritAll="false">
        <property name="version" value="${apr.version}"/>
        <property name="debug" value="${debug}"/>
        <property name="lib-suffix" value="${lib-suffix}"/>
        <property name="compiler" value="${compiler}"/>
        <property name="apr.dir" value="${apr.dir}"/>
        <property name="apr.lib.dir" value="${apr.lib.dir}"/>
        <property name="apr.lib.type" value="${apr.lib.type}"/>
        <property name="project.type" value="${project.type}"/>
        <property name="project.dir" value="${project.dir}"/>
        <property name="project.if.value" value="${project.if}"/>
        <property name="use-pic" value="${use-pic}"/>
        <property name="os.family" value="${os.family}"/>
    </ant>

    <!--  configure can't handle a Windows path   -->
    <condition property="with-apr" value="../apr-${apr.version}/apr-1-config">
         <isset property="is-cygwin"/>
    </condition>
    <property name="with-apr" location="${apr.dir}"/>
</target>


<target name="build-aprutil" depends="build-apr" unless="aprutil-available">

    <property name="aprutil.dir" location="src/apr-util/apr-util-${aprutil.version}"/>
    <property name="aprutil.include.dir" location="${aprutil.dir}/include"/>
    <property name="aprutil.lib.dir" location="${executable.dir}/${aprutil.lib.type}"/>

    <ant antfile="src/apr-util/ant/build.xml" target="build" inheritAll="false">
        <property name="version" value="${aprutil.version}"/>
        <property name="aprutil.dir" value="${aprutil.dir}"/>
        <property name="debug" value="${debug}"/>
        <property name="lib-suffix" value="${lib-suffix}"/>
        <property name="compiler" value="${compiler}"/>
        <property name="apr.include.dir" value="${apr.include.dir}"/>
        <property name="apr.lib.dir" value="${apr.lib.dir}"/>
        <property name="aprutil.lib.dir" value="${aprutil.lib.dir}"/>
        <property name="apr.lib.type" value="${apr.lib.type}"/>
        <property name="aprutil.lib.type" value="${aprutil.lib.type}"/>
        <property name="with-apr" value="${with-apr}"/>
        <property name="project.type" value="${project.type}"/>
        <property name="project.dir" value="${project.dir}"/>
        <property name="project.if.value" value="${project.if}"/>
        <property name="use-pic" value="${use-pic}"/>
        <property name="os.family" value="${os.family}"/>
    </ant>
</target>

<target name="get-cppunit-src" unless="cppunit-src-available">
    <mkdir dir="${lib.dir}"/>
    <get src="${cppunit.mirror}/cppunit/cppunit-${cppunit.version}.tar.gz"
         dest="${lib.dir}/cppunit-${cppunit.version}.tar.gz"
         usetimestamp="true"/>
</target>

<target name="untar-cppunit-src" depends="get-cppunit-src" unless="cppunit-src-expanded">
    <untar src="${lib.dir}/cppunit-${cppunit.version}.tar.gz"
           dest="${lib.dir}" compression="gzip"/>
    <chmod file="${lib.dir}/cppunit-${cppunit.version}/configure"
           perm="u+x"/>
</target>


<target name="build-cppunit" depends="init" unless="cppunit-available">
    <antcall target="untar-cppunit-src"/>

    <property name="cppunit.dir" value="${lib.dir}/cppunit-${cppunit.version}"/>

    <ant antfile="src/cppunit/ant/build.xml" target="build" inheritAll="false">
        <property name="base.dir" value="${cppunit.dir}"/>
        <property name="cppunit.version" value="${cppunit.version}"/>
        <property name="debug" value="${debug}"/>
        <property name="lib-suffix" value="${lib-suffix}"/>
        <property name="compiler" value="${compiler}"/>
        <property name="executable.dir" value="${executable.dir}"/>
        <property name="lib.type" value="${cppunit.lib.type}"/>
        <property name="project.type" value="${project.type}"/>
        <property name="project.dir" value="${project.dir}"/>
        <property name="project.if.value" value="${project.if}"/>
        <property name="use-pic" value="${use-pic}"/>
        <property name="os.family" value="${os.family}"/>
    </ant>
    <property name="cppunit.include.dir" value="${cppunit.dir}/include"/>
    <property name="cppunit.lib.dir" value="${executable.dir}/${cppunit.lib.type}"/>
</target>


<target name="make-header-check">
   <echo file="${header}.cpp" append="false">
#include "${header}"
#include "${header}"
</echo>
</target>


<target name="header-check" depends="build-aprutil, configure"
    description="Checks headers against Effective C++ guidelines">
        <fail unless="is-gcc">Requires GCC compiler</fail>
        <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
        <delete dir="${build.dir}/header-check"/>
        <mkdir dir="${build.dir}/header-check"/>
        <copy todir="${build.dir}/header-check" overwrite="true">
             <fileset dir="${include.dir}" includes="**/*.h">
                    <!-- obsolete header with #error directive to eliminate its use -->
                    <exclude name="**/tchar.h"/>
                    <!--  excluded due to conflict between log4cxx/rfa.h and log4cxx/rolling/rfa.h  -->
                    <exclude name="log4cxx/rollingfileappender.h"/>
             </fileset>
        </copy>
        <foreach target="make-header-check" param="header">
                <path><fileset dir="${build.dir}/header-check" includes="**/*.h"/></path>
        </foreach>
        <cc objdir="${build.dir}/header-check"
                name="gcc"
                exceptions="true"
                subsystem="gui"
                optimize="none"
                multithreaded="true"
                relentless="true"
                debug="${debug}"
                projectsOnly="${projectsOnly}">
                <compilerarg value="-Weffc++"/>
                <compilerarg value="-Wall"/>
                <compilerarg value="${pic-option}" if="pic-option"/>
                <fileset dir="${build.dir}/header-check"
                     includes="**/*.cpp"
                     excludes="log4cxx/private/*.cpp **/aprinitializer.h.cpp"/>
                <includepath path="${include.dir}"/>
                <project outfile="${project.dir}/header-check"
                    type="${project.type}" if="project.if"/>
         </cc>
</target>

<target name="mkdir-project" if="project.if">
    <mkdir dir="${project.dir}"/>
</target>


<target name="build" depends="build-aprutil, configure" description="Build log4cxx library">
    <mkdir dir="${log4cxx.lib.dir}/log4cxx_obj"/>

    <property name="project.compiler" value="${compiler}"/>
    <cc name="${project.compiler}"
                exceptions="true"
                outfile="${log4cxx.lib.dir}/log4cxx${lib-suffix}"
                subsystem="console"
                multithreaded="true"
                outtype="${lib.type}"
                objdir="${log4cxx.lib.dir}/log4cxx_obj"
                debug="${debug}"
                projectsOnly="${projectsOnly}">
        <fileset dir="${src.dir}" includes="*.cpp" excludes="**/iconv_module.cpp"/>
        <fileset dir="${include.dir}" includes="**/*.h"/>
        <includepath path="${include.dir}"/>
        <includepath path="${apr.include.dir}"/>
        <includepath path="${aprutil.include.dir}"/>
        <defineset define="_USRDLL DLL_EXPORTS" if="is-windows"/>
        <defineset define="LOG4CXX"/>
        <defineset define="LOG4CXX_STATIC" if="is-static"/>
        <defineset define="APR_DECLARE_STATIC" if="apr-static"/>
        <defineset define="APU_DECLARE_STATIC" if="aprutil-static"/>
        <defineset define="WIN32" if="is-windows"/>
        <compilerarg value="${pic-option}" if="pic-option"/>
        &libsets;
        <project type="${project.type}" outfile="${project.dir}/log4cxx" if="project.if"/>
    </cc>
</target>


<target name="build-example">
    <mkdir dir="${log4cxx.lib.dir}/${example.name}_obj"/>
    <property name="project.compiler" value="${compiler}"/>
    <property name="example.include.dir" value="${example.src.dir}"/>
    <cc name="${project.compiler}"
                exceptions="true"
                outfile="${log4cxx.lib.dir}/${example.name}"
                subsystem="console"
                multithreaded="true"
                outtype="executable"
                objdir="${log4cxx.lib.dir}/${example.name}_obj"
                debug="${debug}"
                projectsOnly="${projectsOnly}">
        <fileset dir="${example.src.dir}" includes="${example.includes}"/>
        <includepath path="${include.dir}"/>
        <includepath path="${example.include.dir}"/>
        <includepath path="${apr.include.dir}"/>

        <defineset define="WIN32" if="is-windows"/>
        <defineset define="LOG4CXX_STATIC" if="is-static"/>
        <defineset define="APR_DECLARE_STATIC" if="apr-static"/>
        <defineset define="APU_DECLARE_STATIC" if="aprutil-static"/>

        <compilerarg value="${pic-option}" if="pic-option"/>

        <libset libs="log4cxx${lib-suffix}" dir="${log4cxx.lib.dir}"/>
        &libsets;

        <project outfile="${project.dir}/${example.name}" type="${project.type}" if="project.if"/>
    </cc>
</target>

<target name="run-example">
    <!--  remove any stray configuration files  -->
    <delete>
        <fileset dir="${log4cxx.lib.dir}" includes="log4*.properties log4*.xml"/>
    </delete>
    <exec executable="${log4cxx.lib.dir}/${example.name}"
          dir="${log4cxx.lib.dir}"
          failonerror="true">
          <env key="DYLD_LIBRARY_PATH"
                   value="${log4cxx.lib.dir}:${apr.lib.dir}:${aprutil.lib.dir}:${env.DYLD_LIBRARY_PATH}"/>
            <env key="LD_LIBRARY_PATH"
                   value="${log4cxx.lib.dir}:${apr.lib.dir}:${aprutil.lib.dir}:${env.LD_LIBRARY_PATH}"/>
            <env key="Path" value="${env.Path}"/>
    </exec>
</target>


<target name="build-delayedloop" depends="build">
    <antcall target="build-example">
       <param name="example.src.dir" value="${examples.dir}"/>
       <param name="example.name" value="delayedloop"/>
       <param name="example.includes" value="delayedloop.cpp"/>
    </antcall>
</target>

<target name="build-trivial" depends="build">
    <antcall target="build-example">
       <param name="example.src.dir" value="${examples.dir}"/>
       <param name="example.name" value="trivial"/>
       <param name="example.includes" value="trivial.cpp"/>
    </antcall>
</target>

<target name="build-console" depends="build">
    <antcall target="build-example">
       <param name="example.src.dir" value="${examples.dir}"/>
       <param name="example.name" value="console"/>
       <param name="example.includes" value="console.cpp"/>
    </antcall>
</target>

<target name="build-stream" depends="build">
    <antcall target="build-example">
       <param name="example.src.dir" value="${examples.dir}"/>
       <param name="example.name" value="stream"/>
       <param name="example.includes" value="stream.cpp"/>
    </antcall>
</target>

<target name="build-examples"
    depends="build-delayedloop, build-trivial, build-stream, build-console"
    description="Builds example programs"/>

<target name="build-performance" depends="build" description="Builds performance test">
    <antcall target="build-example">
       <param name="example.src.dir" value="${performance.src.dir}"/>
       <param name="example.include.dir" value="${performance.include.dir}"/>
       <param name="example.name" value="performance"/>
       <param name="example.includes" value="**/*.cpp"/>
    </antcall>
</target>


<target name="build-unittest" depends="build, build-cppunit"
    description="Builds unit test app">
    <mkdir dir="${log4cxx.lib.dir}/log4cxx-test_obj"/>

    <property name="project.compiler" value="${compiler}"/>
    <cc name="${project.compiler}"
                exceptions="true"
                outfile="${log4cxx.lib.dir}/log4cxx-test"
                subsystem="console"
                multithreaded="true"
                outputfileproperty="log4cxx-test.exe"
                outtype="executable"
                objdir="${log4cxx.lib.dir}/log4cxx-test_obj"
                debug="${debug}"
                projectsOnly="${projectsOnly}">
        <fileset dir="${tests.cpp.dir}" includes="**/*.cpp **/*.h">
        </fileset>
        <includepath path="${cppunit.include.dir}" if="cppunit.include.dir"/>
        <includepath path="${include.dir}"/>
        <includepath path="${apr.include.dir}"/>
        <includepath path="${aprutil.include.dir}"/>
        <defineset define="LOG4CXX_STATIC" if="is-static"/>
        <defineset define="APR_DECLARE_STATIC" if="apr-static"/>
        <defineset define="APU_DECLARE_STATIC" if="aprutil-static"/>
        <defineset define="WIN32" if="is-windows"/>
        <compilerarg value="${pic-option}" if="pic-option"/>

        <libset libs="log4cxx${lib-suffix}" dir="${log4cxx.lib.dir}"/>
        <libset libs="${cppunit.lib.name}${lib-suffix}" dir="${cppunit.lib.dir}" if="cppunit.lib.dir"/>
        <libset libs="${cppunit.lib.name}${lib-suffix}" unless="cppunit.lib.dir"/>
        <libset libs="dl" if="is-unix"/>
        &libsets;

        <project outfile="${project.dir}/log4cxx-test" type="${project.type}" if="project.if"/>
    </cc>
</target>

<target name="build-defaultinit-unittest" depends="build, build-cppunit"
    description="Builds test of default init">
    <mkdir dir="${log4cxx.lib.dir}/log4cxx-test_obj"/>

    <property name="project.compiler" value="${compiler}"/>
    <cc name="${project.compiler}"
                exceptions="true"
                outfile="${log4cxx.lib.dir}/log4cxx-defaultinit-test"
                subsystem="console"
                multithreaded="true"
                outputfileproperty="log4cxx-defaultinit-test.exe"
                outtype="executable"
                objdir="${log4cxx.lib.dir}/log4cxx-test_obj"
                debug="${debug}"
                projectsOnly="${projectsOnly}">
        <fileset dir="${tests.cpp.dir}" includes="defaultinit/*.cpp main.cpp">
        </fileset>
        <includepath path="${cppunit.include.dir}" if="cppunit.include.dir"/>
        <includepath path="${include.dir}"/>
        <includepath path="${apr.include.dir}"/>
        <includepath path="${aprutil.include.dir}"/>
        <defineset define="LOG4CXX_STATIC" if="is-static"/>
        <defineset define="APR_DECLARE_STATIC" if="apr-static"/>
        <defineset define="APU_DECLARE_STATIC" if="aprutil-static"/>
        <defineset define="WIN32" if="is-windows"/>
        <compilerarg value="${pic-option}" if="pic-option"/>

        <libset libs="log4cxx${lib-suffix}" dir="${log4cxx.lib.dir}"/>
        <libset libs="${cppunit.lib.name}${lib-suffix}" dir="${cppunit.lib.dir}" if="cppunit.lib.dir"/>
        <libset libs="${cppunit.lib.name}${lib-suffix}" unless="cppunit.lib.dir"/>
        <libset libs="dl" if="is-unix"/>
        &libsets;

        <project outfile="${project.dir}/log4cxx-defaultinit-test"
                 type="${project.type}"
                 if="project.if"/>
    </cc>
</target>


<target name="make-unittest">
    <mkdir dir="${log4cxx.lib.dir}/log4cxx-test_obj"/>

    <property name="project.compiler" value="${compiler}"/>
    <cc name="${project.compiler}"
                exceptions="true"
                outfile="${log4cxx.lib.dir}/${outfile.name}"
                subsystem="console"
                multithreaded="true"
                outputfileproperty="${outfile.property}"
                outtype="executable"
                objdir="${log4cxx.lib.dir}/log4cxx-test_obj"
                debug="${debug}"
                projectsOnly="${projectsOnly}">
        <fileset dir="${tests.cpp.dir}" includes="${src.pattern}">
        </fileset>
        <includepath path="${cppunit.include.dir}" if="cppunit.include.dir"/>
        <includepath path="${include.dir}"/>
        <includepath path="${apr.include.dir}"/>
        <includepath path="${aprutil.include.dir}"/>
        <defineset define="LOG4CXX_STATIC" if="is-static"/>
        <defineset define="APR_DECLARE_STATIC" if="apr-static"/>
        <defineset define="APU_DECLARE_STATIC" if="aprutil-static"/>
        <defineset define="WIN32" if="is-windows"/>
        <compilerarg value="${pic-option}" if="pic-option"/>

        <libset libs="log4cxx${lib-suffix}" dir="${log4cxx.lib.dir}"/>
        <libset libs="${cppunit.lib.name}${lib-suffix}" dir="${cppunit.lib.dir}" if="cppunit.lib.dir"/>
        <libset libs="${cppunit.lib.name}${lib-suffix}" unless="cppunit.lib.dir"/>
        &libsets;

        <project outfile="${project.dir}/log4cxx-test" type="${project.type}" if="project.if"/>
    </cc>
</target>

<target name="build-standalone-unittest"
    depends="build-cppunit"
    description="Builds a unit tests + log4cxx executable">
    <mkdir dir="${executable.dir}/static/log4cxx-standalone-test_obj"/>
    <property name="project.compiler" value="${compiler}"/>
    <cc name="${project.compiler}"
                exceptions="true"
                outfile="${executable.dir}/static/log4cxx-standalone-test"
                subsystem="console"
                multithreaded="true"
                outputfileproperty="log4cxx-standalone-test.exe"
                outtype="executable"
                objdir="${executable.dir}/static/log4cxx-standalone-test_obj"
                debug="${debug}"
                projectsOnly="${projectsOnly}">
        <fileset dir="${src.dir}" includes="*.cpp" excludes="**/iconv_module.cpp"/>
        <fileset dir="${include.dir}" includes="**/*.h"/>
        <fileset dir="${tests.cpp.dir}" includes="**/*.cpp **/*.h">
        </fileset>
        <includepath path="${cppunit.include.dir}" if="cppunit.include.dir"/>
        <includepath path="${include.dir}"/>
        <includepath path="${apr.include.dir}"/>
        <includepath path="${aprutil.include.dir}"/>
        <defineset define="LOG4CXX"/>
        <defineset define="APR_DECLARE_STATIC" if="apr-static"/>
        <defineset define="APU_DECLARE_STATIC" if="aprutil-static"/>
        <defineset define="WIN32" if="is-windows"/>
        <compilerarg value="${pic-option}" if="pic-option"/>
        <libset libs="${cppunit.lib.name}${lib-suffix}" dir="${cppunit.lib.dir}" if="cppunit.lib.dir"/>
        <libset libs="${cppunit.lib.name}${lib-suffix}" unless="cppunit.lib.dir"/>

        &libsets;

        <includepath path="${include.dir}"/>
        <includepath path="${apr.include.dir}"/>
        <defineset define="LOG4CXX"/>
        <libset libs="cw32mt" if="is-bcc"/>


        <project outfile="${projects.dir}/log4cxx-standalone-test"
                 type="${project.type}"
                 if="project.if"/>
    </cc>
</target>

<target name="build-all" depends="build-examples, build-unittest, build-performance"
     description="Builds all artifacts"/>

<target name="clean-output" depends="init">
     <delete>
         <fileset dir="${tests.dir}" includes="output/*"/>
     </delete>
</target>

<target name="run-defaultinit-unittest" depends="build-defaultinit-unittest"
    description="Runs default init unit tests">

    <mkdir dir="${tests.output.dir}"/>

    <!--  test use of log4j.configuration -->
    <property name="defaultInit3.properties"
         location="${tests.resources.dir}/input/defaultInit3.properties"/>

    <property name="defaultInit.xml"
         location="${tests.resources.dir}/input/xml/defaultInit.xml"/>


    <!--  test of log4j.properties -->
    <delete file="${log4cxx.lib.dir}/log4*.properties"/>
    <delete file="${log4cxx.lib.dir}/log4*.xml"/>
    <copy tofile="${log4cxx.lib.dir}/log4j.properties"
       file="${defaultInit3.properties}" overwrite="true"/>
    <exec executable="${log4cxx-defaultinit-test.exe}" dir="${log4cxx.lib.dir}"
              failonerror="true">
            <arg value="TestCase3"/>
            <env key="DYLD_LIBRARY_PATH"
                   value="${log4cxx.lib.dir}:${apr.lib.dir}:${aprutil.lib.dir}:${cppunit.lib.dir}:${env.DYLD_LIBRARY_PATH}"/>
            <env key="LD_LIBRARY_PATH"
                   value="${log4cxx.lib.dir}:${apr.lib.dir}:${aprutil.lib.dir}:${cppunit.lib.dir}:${env.LD_LIBRARY_PATH}"/>
    </exec>

    <!-- modify log4j.properties so if it has precedence the test fails  -->
    <replace file="${log4cxx.lib.dir}/log4j.properties" token="D3" value="D4"/>
    <copy tofile="${log4cxx.lib.dir}/log4cxx.properties"
       file="${defaultInit3.properties}"/>
    <exec executable="${log4cxx-defaultinit-test.exe}" dir="${log4cxx.lib.dir}"
              failonerror="true">
            <arg value="TestCase3"/>
            <env key="DYLD_LIBRARY_PATH"
                   value="${log4cxx.lib.dir}:${apr.lib.dir}:${aprutil.lib.dir}:${cppunit.lib.dir}:${env.DYLD_LIBRARY_PATH}"/>
            <env key="LD_LIBRARY_PATH"
                   value="${log4cxx.lib.dir}:${apr.lib.dir}:${aprutil.lib.dir}:${cppunit.lib.dir}:${env.LD_LIBRARY_PATH}"/>
    </exec>

    <delete file="${log4cxx.lib.dir}/log4cxx.properties"/>
    <delete file="${log4cxx.lib.dir}/log4j.properties"/>

    <copy tofile="${log4cxx.lib.dir}/log4j.xml"
       file="${defaultInit.xml}"/>
    <copy todir="${log4cxx.lib.dir}" file="${tests.resources.dir}/input/xml/log4j.dtd"/>
    <exec executable="${log4cxx-defaultinit-test.exe}" dir="${log4cxx.lib.dir}"
              failonerror="true">
            <arg value="TestCase4"/>
            <env key="LD_LIBRARY_PATH"
                   value="${log4cxx.lib.dir}:${apr.lib.dir}:${aprutil.lib.dir}:${cppunit.lib.dir}:${env.LD_LIBRARY_PATH}"/>
            <env key="DYLD_LIBRARY_PATH"
                   value="${log4cxx.lib.dir}:${apr.lib.dir}:${aprutil.lib.dir}:${cppunit.lib.dir}:${env.DYLD_LIBRARY_PATH}"/>
    </exec>

    <mkdir dir="${tests.resources.dir}/output"/>
    <delete>
	<fileset dir="${tests.resources.dir}/output"/>
    </delete>

    <exec executable="${log4cxx-defaultinit-test.exe}" dir="${tests.resources.dir}"
              failonerror="true">
            <arg value="TestCase3"/>
            <env key="LD_LIBRARY_PATH"
                   value="${log4cxx.lib.dir}:${apr.lib.dir}:${aprutil.lib.dir}:${cppunit.lib.dir}:${env.LD_LIBRARY_PATH}"/>
            <env key="DYLD_LIBRARY_PATH"
                   value="${log4cxx.lib.dir}:${apr.lib.dir}:${aprutil.lib.dir}:${cppunit.lib.dir}:${env.DYLD_LIBRARY_PATH}"/>
            <env key="log4j.configuration"
                   value="${defaultInit3.properties}"/>
    </exec>

    <!--  test of LOG4CXX_CONFIGURATION -->
    <exec executable="${log4cxx-defaultinit-test.exe}" dir="${tests.resources.dir}"
              failonerror="true">
            <arg value="TestCase3"/>
            <env key="LD_LIBRARY_PATH"
                   value="${log4cxx.lib.dir}:${apr.lib.dir}:${aprutil.lib.dir}:${cppunit.lib.dir}:${env.LD_LIBRARY_PATH}"/>
            <env key="DYLD_LIBRARY_PATH"
                   value="${log4cxx.lib.dir}:${apr.lib.dir}:${aprutil.lib.dir}:${cppunit.lib.dir}:${env.DYLD_LIBRARY_PATH}"/>
            <env key="LOG4CXX_CONFIGURATION"
                   value="${defaultInit3.properties}"/>
    </exec>


</target>

<target name="run-unittest" depends="build-unittest, run-defaultinit-unittest, clean-output"
    description="Runs unit test">
    <property environment="env"/>
    <mkdir dir="${tests.output.dir}"/>
    <delete>
         <fileset dir="${tests.output.dir}" includes="*"/>
    </delete>
    <exec executable="${log4cxx-test.exe}" dir="${tests.resources.dir}"
              failonerror="true">
            <arg value="+TestCase1"/>
            <env key="TOTO" value="wonderful"/>
            <env key="key1" value="value1"/>
            <env key="key2" value="value2"/>
            <env key="LD_LIBRARY_PATH"
                   value="${log4cxx.lib.dir}:${apr.lib.dir}:${aprutil.lib.dir}:${cppunit.lib.dir}:${env.LD_LIBRARY_PATH}"/>
            <env key="DYLD_LIBRARY_PATH"
                   value="${log4cxx.lib.dir}:${apr.lib.dir}:${aprutil.lib.dir}:${cppunit.lib.dir}:${env.DYLD_LIBRARY_PATH}"/>
            <env key="Path"
                   value="${log4cxx.lib.dir};${env.Path}"/>
    </exec>

</target>

<target name="run-standalone-unittest"
   depends="build-standalone-unittest, clean-output"
   description="Runs standalone unit test">
    <property environment="env"/>
    <mkdir dir="${tests.output.dir}"/>
    <delete>
         <fileset dir="${tests.output.dir}" includes="*"/>
    </delete>
    <exec executable="${log4cxx-standalone-test.exe}" dir="${tests.resources.dir}"
              failonerror="true">
            <env key="TOTO" value="wonderful"/>
            <env key="key1" value="value1"/>
            <env key="key2" value="value2"/>
            <env key="DYLD_LIBRARY_PATH"
                   value="${log4cxx.lib.dir}:${apr.lib.dir}:${aprutil.lib.dir}:${cppunit.lib.dir}:${env.DYLD_LIBRARY_PATH}"/>
            <env key="LD_LIBRARY_PATH"
                   value="${log4cxx.lib.dir}:${apr.lib.dir}:${aprutil.lib.dir}:${cppunit.lib.dir}:${env.LD_LIBRARY_PATH}"/>
            <env key="Path"
                   value="${log4cxx.lib.dir};${env.Path}"/>
    </exec>
</target>

<target name="build-projects">
        <mkdir dir="${project.dir}"/>
        <antcall target="build">
                <param name="project.if" value="true"/>
                <param name="project.type" value="${project.type}"/>
                <param name="project.compiler" value="${project.compiler}"/>
                <param name="projects.dir" location="${project.dir}"/>
                <param name="projectsOnly" value="true"/>
        </antcall>
        <antcall target="build-unittest">
                <param name="project.if" value="true"/>
                <param name="project.type" value="${project.type}"/>
                <param name="project.compiler" value="${project.compiler}"/>
                <param name="projects.dir" location="${project.dir}"/>
                <param name="projectsOnly" value="true"/>
        </antcall>
        <antcall target="build-standalone-unittest">
                <param name="project.if" value="true"/>
                <param name="project.type" value="${project.type}"/>
                <param name="project.compiler" value="${project.compiler}"/>
                <param name="projects.dir" location="${project.dir}"/>
                <param name="projectsOnly" value="true"/>
        </antcall>
        <antcall target="build-examples">
                <param name="project.if" value="true"/>
                <param name="project.type" value="${project.type}"/>
                <param name="project.compiler" value="${project.compiler}"/>
                <param name="projects.dir" location="${project.dir}"/>
                <param name="projectsOnly" value="true"/>
        </antcall>
        <antcall target="build-performance">
                <param name="project.if" value="true"/>
                <param name="project.type" value="${project.type}"/>
                <param name="project.compiler" value="${project.compiler}"/>
                <param name="projects.dir" location="${project.dir}"/>
                <param name="projectsOnly" value="true"/>
        </antcall>
</target>

<target name="build-projects-vc6" description="Builds project files for Microsoft Visual C++ 6">
    <antcall target="build-projects">
        <param name="project.dir" value="msvc"/>
        <param name="project.type" value="msvc6"/>
        <param name="project.compiler" value="msvc"/>
    </antcall>
    <echo file="msvc/configure.bat">
copy ..\lib\apr-${apr.version}\include\apr.hw ..\lib\apr-${apr.version}\include\apr.h
copy ..\lib\apr-util-${aprutil.version}\include\apu.hw ..\lib\apr-util-${aprutil.version}\include\apu.h
copy ..\lib\apr-util-${aprutil.version}\include\aprldap.hw ..\lib\apr-util-${aprutil.version}\include\aprldap.h
copy ..\lib\apr-util-${aprutil.version}\include\apuwant.hw ..\lib\apr-util-${aprutil.version}\include\apuwant.h
copy ..\include\log4cxx\log4cxx.hw ..\include\log4cxx.h
copy ..\include\log4cxx\private\log4cxx_private.hw ..\include\private\log4cxx_private.h
    </echo>
    <chmod file="msvc/configure.bat" perm="ugo+rwx"/>
</target>

<target name="build-projects-vc8" description="Builds project files for Microsoft Visual C++ 2005">
    <antcall target="build-projects">
      <param name="project.dir" location="msvc8"/>
      <param name="project.type" value="msvc8"/>
      <param name="project.compiler" value="msvc"/>
    </antcall>
</target>

<target name="build-projects-xcode" description="Builds project files for Apple Xcode">
    <antcall target="build-projects">
        <param name="project.dir" location="xcode"/>
        <param name="project.type" value="xcode"/>
        <param name="project.compiler" value="${compiler}"/>
    </antcall>
</target>

<target name="build-projects-cbx" description="Builds project files for Borland CBuilderX">
    <antcall target="build-projects">
        <param name="project.dir" location="cbx"/>
        <param name="project.type" value="cbuilderx"/>
        <param name="project.compiler" value="${compiler}"/>
    </antcall>
</target>

<target name="test-compile" depends="build-unittest, build-examples, build-performance"/>


<target name="check" depends="run-unittest, build-examples, build-performance"
     description="Runs all diagnostic tests">
    <antcall target="run-example">
        <param name="example.name" value="trivial"/>
    </antcall>
    <antcall target="run-example">
        <param name="example.name" value="stream"/>
    </antcall>
</target>


<target name="apidocs" depends="init" description="Build log4cxx manual">
  <copy file="src/site/doxy/Doxyfile.in" tofile="${build.dir}/Doxyfile" 
     overwrite="true"/>
  <replace file="${build.dir}/Doxyfile">
    <replacefilter token="@VERSION@" value="${version}"/>
    <replacefilter token="@base_dir@" value="${base.dir}"/>
    <replacefilter token="@enable_dot@" value="${enable_dot}"/>
    <replacefilter token="@manual_dest@" value="${base.dir}/target/site/apidocs"/>
  </replace>
  <mkdir dir="target/site/apidocs"/>
  <exec executable="${doxygen.exe}" dir="${build.dir}"/>
</target>

<target name="gump" depends="check, header-check"/>

<target name="fixcrlf" depends="init" description="repair end-of-line sequences">
   <fixcrlf srcDir="${base.dir}" tab="remove" tablength="3"
       eof="remove" fixlast="true" eol="unix" includes="*.xml **/*.cpp **/*.h" excludes="lib/**/*"/>
</target>

        <target name="prepare-changes" description="Prepares changes.xml from a JIRA issues list">
            <xslt style="src/changes/changes.xslt" 
                  in="issues.xml" 
                  out="src/changes/changes.xml"/>
        </target>

	<target name="checkout-site" unless="svn-available">
		<exec executable="svn">
			<arg value="co"/>
			<arg value="${svnsite.url}"/>
			<arg value="target/site-deploy"/>
		</exec>
	</target>

	<target name="update-site" if="svn-available">
		<exec executable="svn" dir="target/site-deploy" failonerror="true">
			<arg value="update"/>
		</exec>
	</target>

	<target name="post-site" depends="checkout-site, update-site"/>
	

        <target name="mime=html">
            <exec executable="svn">
		<arg value="propset"/>
                <arg value="svn:mime-type"/>
                <arg value="text/html"/>
                <arg value="${src.html}"/>
            </exec>
        </target>

        <target name="mime=css">
            <exec executable="svn">
		<arg value="propset"/>
                <arg value="svn:mime-type"/>
                <arg value="text/css"/>
                <arg value="${src.css}"/>
            </exec>
        </target>
	

	<target name="site-deploy">
		<!-- Add any new files (and generate innocuous warnings for the existing content)  -->
                <delete file="target/site-deploy/svn-commit.tmp~"/>
		<exec executable="bash" dir="target/site-deploy" failonerror="true">
			<arg line='-c "svn add --force *"'/>
		</exec>
                <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" />
                <foreach target="mime=html" param="src.html">
                        <path>
                                <fileset dir="target/site-deploy" includes="**/*.html"/>
                        </path>
                </foreach>
                <foreach target="mime=css" param="src.css">
                        <path>
                                <fileset dir="target/site-deploy" includes="**/*.css"/>
                        </path>
                </foreach>
		<!--  requires that SVN_EDITOR, VISUAL or EDITOR being set to edit commit description -->
		<exec executable="svn" dir="target/site-deploy" failonerror="true">
		    <arg value="commit"/>
		</exec>
	</target>

</project>
