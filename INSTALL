Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


Maven 2:
==================

Maven 2  used to prepare site documentation and will be used to package the release.
TODO: add more documentation.


Ant + cpptasks build:
==================

The Ant build script is the definitive build script for log4cxx and
is able to build log4cxx with (at least) gcc, Microsoft Visual C++ 6, 7, 7.1
and Borland C++ 5.5 and produce IDE project files for Microsoft Visual Studio
6, Borland CBuilderX  and Apple Xcode to assist in debugging.

Prerequisites:

Apache Ant 1.6.1 or later
   http://ant.apache.org

cpptasks.jar and ant-contrib.jar on CLASSPATH
   (March 2005 or later releases or CVS HEAD)
   http://ant-contrib.sourceforge.net

JDK 1.4 or later.  Earlier versions might work but
have not been tested.

GNU patch on command path.

GNU sed, gzip and zip on command path (required for tests)

Connection to internet

   - or -

The following files placed in the lib directory:
    apr-1.2.2.tar.gz
    apr-util-1.2.2.tar.gz
 
    http://apr.apache.org
 


Building:

Unix gcc:

$> export CLASSPATH=path_to_cpptasks/cpptasks.jar:path_to_antcontrib/ant-contrib.jar

- or -

$> setenv CLASSPATH path_to_cpptasks/cpptasks.jar:path_to_antcontrib/ant-contrib.jar


$> ant


Microsoft Visual C++:

$> set CLASSPATH=path_to_cpptasks/cpptasks.jar;path_to_antcontrib/ant-contrib.jar
$> path_to_vc\bin\vcvars32
$> ant


Borland C++:

$> set CLASSPATH=path_to_cpptasks/cpptasks.jar;path_to_antcontrib/ant-contrib.jar
$> ant -Dcompiler=bcc



Build options:

     -Dcompiler= see list from http://ant-contrib.sourceforge.net/cc.html
     -Ddebug=[true | false]
     -Dlib.type=[shared | static | dylib]
     -Drtti=[false | true]
     -Dapache.mirror=URL
     -Dapr.lib.type=[static | shared]
     -Daprutil.lib.type=[static | shared]
     -Dapriconv.lib.type=[static | shared]
     -Dhas.wchar_t=[1 | 0]
     -Dlogchar=[wchar_t utf8]
     -Dos.family=cygwin

Build targets:

 build                      Build log4cxx library
 build-all                  Builds all artifacts
 build-examples             Builds example programs
 build-performance          Builds performance test
 build-projects-cbx         Builds project files for Borland CBuilderX
 build-projects-vc6         Builds project files for Microsoft Visual C++ 6
 build-projects-xcode       Builds project files for Apple Xcode
 build-shortsocketserver    builds a socket server used by unit tests
 build-standalone-unittest  Builds a unit tests + log4cxx executable
 build-unittest             Builds unit test app
 check                      Runs all diagnostic tests
 clean                      Removes built files
 dist                       Builds a source distribution
 fixcrlf                    repair end-of-line sequences
 header-check               Checks headers against Effective C++ guidelines
 run-standalone-unittest    Runs standalone unit test
 run-unittest               Runs unit test
 usage                      Describes usage of the build script





autotools
==================


   The file `configure.in' is used to create `configure' by a program
called `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code.

  2. type `./autogen.sh' to generate the configure script.
     If you're using `csh' on an old version of System V, you might
         need to type `sh ./autogen.sh' instead to prevent `csh' from trying
         to execute `autogen.sh' itself.

  3. type `./configure' to configure the package for your system.
     If you're using `csh' on an old version of System V, you might
         need to type `sh ./configure' instead to prevent `csh' from trying
         to execute `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  4. Type `make' to compile the package.

  5. Optionally, type `make check' to run self-tests.

  6. Type `sudo make install' to install the programs and any data files and
     documentation.

  7. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Configure options
=================

--with-apr : Specify non-default location for apr.
--with-aprutil: Specify non-default location for apr-util.
--enable-wchar_t: Enable wchar_t API methods.
--enable-unichar: Enable UniChar API methods, UniChar is an unsigned short containing UTF-16.
--enable-cfstring: Enable CFString API methods, CFString is Mac OS/X CoreFoundation's string.
--with-logchar= utf-8 | wchar_t | unichar: Specify internal character type. 
--with-charset = utf-8 | iso-8859-1 | usascii | ebcdic | auto: Specified fixed encoding.


SMTP support (SMTPAppender) can be disabled through option --with-SMTP
        * "libesmtp": libesmtp library (http://www.stafford.uklinux.net/libesmtp/)
        * "no" (default): no SMTP support

--enable-doxygen : generate documentation using Doxygen
--enable-dot : use Dot to generate class diagrams for Doxygen
--enable-html-docs: generate HTML documentation with doxygen
--enable-latex-docs: generate Latex documentation with doxygen
 
ODBC support (ODBCAppender) can be added through option --with-ODBC
        * "unixODBC" : unixODBC library (http://www.unixodbc.org)
        * "iODBC" : iODBC library (http://www.iodbc.org)
        * "Microsoft" : Microsoft ODBC library
        * "no" (default) : no ODBC support
        
SMTP and ODBC support involving compiling and linking with
that are not licensed under the Apache Software License.
You should review the corresponding licenses and understand
their implications before using those options.



Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.

