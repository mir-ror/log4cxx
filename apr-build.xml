<?xml version="1.0"?>
<!--
 Copyright 2004-2005 The Apache Software Foundation.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

-->

<!--

This file builds APR using Apache Ant (http://ant.apache.org)
and the C++ compilation tasks from http://ant-contrib.sourceforge.net.


-->
<project name="apr" default="check">

<property name="debug" value="true"/>
<property name="version" value="1.2.2"/>
<property name="apr.dir" location="."/>
<property name="apr.include.dir" location="${apr.dir}/include"/>
<property name="build.dir" location="${apr.dir}/build"/>
<property name="src.dir" location="${apr.dir}"/>
<property name="test.dir" location="${apr.dir}/test"/>
<property name="apr.lib.type" value="shared"/>
<property name="project.dir" value="${build.dir}"/>

<taskdef resource="cpptasks.tasks"/>
<typedef resource="cpptasks.types"/>

<target name="usage" description="Displays usage notes on build">
        <echo>
        </echo>
</target>

<target name="os-detect">
        <condition property="is-unix" value="true">
             <and>
                  <not>
                      <or>
                          <isset property="is-windows"/>
                          <equals arg1="${os.family}" arg2="windows"/>
                      </or>
                  </not>
                  <or>
                       <os family="unix"/>
                       <equals arg1="${os.family}" arg2="cygwin"/>
                       <equals arg1="${os.family}" arg2="unix"/>
                  </or>
             </and>
        </condition>
        <condition property="is-windows" value="true">
             <and>
                  <not><isset property="is-unix"/></not>
                  <or>
                      <os family="windows"/>
                      <equals arg1="${os.family}" arg2="windows"/>
                  </or>
             </and>
        </condition>
</target>


<target name="win-init" depends="os-detect" if="is-windows">
    <property name="compiler" value="msvc"/>
    <property name="arch" value="win32"/>
    <property name="project.type" value="msvc6"/>
</target>

<target name="unix-init" depends="os-detect" if="is-unix">
    <property name="compiler" value="gcc"/>
    <condition property="is-gcc" value="true">
        <or>
            <equals arg1="${compiler}" arg2="gcc"/>
            <equals arg1="${compiler}" arg2="g++"/>
        </or>
    </condition>
    <property name="arch" value="unix"/>
    <property name="project.type" value="cbuilderx"/>
</target>

<target name="init" depends="win-init, unix-init">
        <property environment="env"/>
        <condition property="pic-option" value="-fPIC">
                <and>
                        <isset property="is-gcc"/>
                        <istrue value="${use-pic}"/>
                </and>
        </condition>

        <condition property="is-debug" value="true">
            <istrue value="${debug}"/>
        </condition>

        <condition property="apr.lib.dir" value="${build.dir}/debug/${apr.lib.type}">
            <isset property="is-debug"/>
        </condition>
        <property name="apr.lib.dir" location="${build.dir}/release/${apr.lib.type}"/>
        <mkdir dir="${apr.lib.dir}"/>

        <condition property="lib-suffix" value="d">
            <isset property="is-debug"/>
        </condition>
        <property name="lib-suffix" value=""/>

        <condition property="is-apr-shared" value="true">
            <equals arg1="${apr.lib.type}" arg2="shared"/>
        </condition>

        <condition property="is-bcc" value="true">
            <equals arg1="${compiler}" arg2="bcc"/>
        </condition>
        <condition property="project.if" value="true">
            <istrue value="${project.if.value}"/>
        </condition>
</target>

<target name="clean" description="Removes build product files">
        <delete dir="${build.dir}"/>
</target>


<target name="configure-check" depends="init">
        <condition property="apr-configure-available" value="true">
              <available file="${apr.include.dir}/apr.h"/>
        </condition>
</target>


<target name="win-configure" depends="configure-check" if="is-windows" unless="apr-configure-available">
    <copy tofile="${apr.include.dir}/apr.h" file="${apr.include.dir}/apr.hw"/>
</target>

<target name="unix-configure" depends="configure-check" if="is-unix" unless="apr-configure-available">
         <!--  shelling to configure allows cygwin to work  -->
        <exec executable="sh" dir="${apr.dir}">
            <arg value="./configure"/>
        </exec>
</target>


<target name="configure" depends="unix-configure, win-configure"/>


<target name="build" depends="configure" description="Build library">
    <mkdir dir="${apr.lib.dir}/apr_obj"/>
    <cc name="${compiler}"
        outfile="${apr.lib.dir}/apr-1${lib-suffix}"
        subsystem="console"
        multithreaded="true"
        outtype="${apr.lib.type}"
        objdir="${apr.lib.dir}/apr_obj"
        outputfileproperty="apr-1.dll"
        debug="${debug}">
        <fileset dir="${src.dir}" includes="**/${arch}/*.c" excludes="**/apr_app.c"/>
        <fileset dir="${src.dir}/file_io/unix"
            includes="copy.c fileacc.c filepath_util.c fullrw.c mktemp.c tempdir.c"/>
        <fileset dir="${src.dir}/memory/unix" includes="*.c"/>
        <fileset dir="${src.dir}/misc/${arch}" includes="*.c"/>
        <fileset dir="${src.dir}/misc/unix"
            includes="errorcodes.c getopt.c otherchild.c version.c"/>
        <fileset dir="${src.dir}/mmap/unix" includes="common.c"/>
        <fileset dir="${src.dir}/network_io/unix"
            includes="inet_ntop.c inet_pton.c sockaddr.c"/>
        <fileset dir="${src.dir}/poll/unix" includes="select.c"/>
        <fileset dir="${src.dir}/random/unix" includes="*.c"/>
        <fileset dir="${src.dir}/strings" includes="*.c"/>
        <fileset dir="${src.dir}/tables" includes="*.c"/>
        <fileset dir="${apr.include.dir}" includes="*.h"/>
        <fileset dir="${apr.include.dir}/arch" includes="*.h"/>
        <fileset dir="${apr.include.dir}/arch/${arch}" includes="*.h"/>
        <fileset dir="${apr.include.dir}/arch/unix" includes="*.h"/>
        <fileset dir="${src.dir}/support/unix" includes="waitio.c"/>
        <includepath path="${apr.include.dir}"/>
        <includepath path="${apr.include.dir}/arch"/>
        <includepath path="${apr.include.dir}/arch/${arch}"/>
        <includepath path="${apr.include.dir}/arch/unix"/>
        <defineset define="APR_DECLARE_EXPORT" if="is-apr-shared"/>
        <defineset define="APR_DECLARE_STATIC" unless="is-apr-shared"/>
        <defineset if="is-windows">
            <define name="WIN32" value="1"/>
        </defineset>
        <defineset define="_HAVE_CONFIG_H _REENTRANT _GNU_SOURCE" if="is-gcc"/>
        <compilerarg value="${pic-option}" if="pic-option"/>
        <libset libs="advapi32 ws2_32 mswsock rpcrt4" if="is-windows"/>
        <libset libs="pthread dl" if="is-unix"/>
        <libset libs="cw32mt" if="is-bcc"/>
        <project type="${project.type}" outfile="${project.dir}/apr" if="project.if"/>
    </cc>
</target>

<target name="build-test">
    <mkdir dir="${apr.lib.dir}/apr_obj"/>
    <cc name="${compiler}"
        outfile="${apr.lib.dir}/${test}"
        subsystem="console"
        multithreaded="true"
        outtype="executable"
        objdir="${apr.lib.dir}/apr_obj"
        debug="${debug}">
        <fileset dir="${test.dir}" includes="${testfiles}"/>
        <includepath path="${apr.include.dir}"/>
        <defineset if="is-windows">
            <define name="WIN32" value="1"/>
        </defineset>
        <defineset define="_HAVE_CONFIG_H _REENTRANT _GNU_SOURCE" if="is-gcc"/>
        <compilerarg value="${pic-option}" if="pic-option"/>
        <libset dir="${apr.lib.dir}" libs="apr-1${lib-suffix}"/>
        <libset libs="cw32mt" if="is-bcc"/>
        <libset libs="pthread dl" if="is-unix"/>
        <libset libs="advapi32 ws2_32 mswsock rpcrt4" if="is-windows"/>
        <project type="${project.type}" outfile="${project.dir}/${test}" if="project.if"/>
    </cc>
</target>

<target name="run-test">
    <exec executable="${apr.lib.dir}/${test}"
          dir="${apr.lib.dir}"
          failonerror="true">
        <env key="DYLD_LIBRARY_PATH"
           value="${apr.lib.dir}:${env.DYLD_LIBRARY_PATH}"/>
        <env key="LD_LIBRARY_PATH"
           value="${apr.lib.dir}:${env.LD_LIBRARY_PATH}"/>
    </exec>
</target>


<target name="build-testlockperf" depends="build">
    <antcall target="build-test">
        <param name="test" value="testlockperf"/>
        <param name="testfiles" value="testlockperf.c"/>
    </antcall>
</target>

<target name="run-testlockperf" depends="build-testlockperf">
    <antcall target="run-test">
        <param name="test" value="testlockperf"/>
    </antcall>
</target>

<target name="build-testshmproducer" depends="build">
    <antcall target="build-test">
        <param name="test" value="testshmproducer"/>
        <param name="testfiles" value="testshmproducer.c"/>
    </antcall>
</target>

<target name="build-testshmconsumer" depends="build">
    <antcall target="build-test">
        <param name="test" value="testshmconsumer"/>
        <param name="testfiles" value="testshmconsumer.c"/>
    </antcall>
</target>


<target name="build-testmutexscope" depends="build">
    <antcall target="build-test">
        <param name="test" value="testmutexscope"/>
        <param name="testfiles" value="testmutexscope.c"/>
    </antcall>
</target>

<target name="run-testmutexscope" depends="build-testmutexscope">
    <antcall target="run-test">
        <param name="test" value="testmutexscope"/>
    </antcall>
</target>

<target name="build-occhild" depends="build">
    <antcall target="build-test">
        <param name="test" value="occhild"/>
        <param name="testfiles" value="occhild.c"/>
    </antcall>
</target>

<target name="build-sockchild" depends="build">
    <antcall target="build-test">
        <param name="test" value="sockchild"/>
        <param name="testfiles" value="sockchild.c"/>
    </antcall>
</target>


<target name="build-readchild" depends="build">
    <antcall target="build-test">
        <param name="test" value="readchild"/>
        <param name="testfiles" value="readchild.c"/>
    </antcall>
</target>


<target name="build-globalmutexchild" depends="build">
    <antcall target="build-test">
        <param name="test" value="globalmutexchild"/>
        <param name="testfiles" value="globalmutexchild.c"/>
    </antcall>
</target>

<target name="build-tryread" depends="build">
    <antcall target="build-test">
        <param name="test" value="tryread"/>
        <param name="testfiles" value="tryread.c"/>
    </antcall>
</target>

<target name="build-proc_child" depends="build">
    <antcall target="build-test">
        <param name="test" value="proc_child"/>
        <param name="testfiles" value="proc_child.c"/>
    </antcall>
</target>


<target name="build-sendfile" depends="build">
    <antcall target="build-test">
        <param name="test" value="sendfile"/>
        <param name="testfiles" value="sendfile.c"/>
    </antcall>
</target>


<target name="build-mod_test" depends="build">
    <mkdir dir="${apr.lib.dir}/apr_obj"/>
    <mkdir dir="${apr.lib.dir}/.libs"/>
    <cc name="${compiler}"
        outfile="${apr.lib.dir}/.libs/mod_test"
        subsystem="console"
        multithreaded="true"
        outtype="shared"
        objdir="${apr.lib.dir}/apr_obj"
        outputfileproperty="libmod_test.so"
        debug="${debug}">
        <fileset dir="${test.dir}" includes="mod_test.c"/>
        <includepath path="${apr.include.dir}"/>
        <defineset if="is-windows">
            <define name="WIN32" value="1"/>
        </defineset>
        <defineset define="_HAVE_CONFIG_H _REENTRANT _GNU_SOURCE" if="is-gcc"/>
        <compilerarg value="${pic-option}" if="pic-option"/>
        <libset dir="${apr.lib.dir}" libs="apr-1${lib-suffix}"/>
        <libset libs="cw32mt" if="is-bcc"/>
        <libset libs="advapi32 ws2_32 mswsock rpcrt4" if="is-windows"/>
        <project type="${project.type}" outfile="${project.dir}/mod_test" if="project.if"/>
    </cc>
    <copy file="${libmod_test.so}" tofile="${apr.lib.dir}/.libs/mod_test.so"/>
</target>


<target name="build-testall" depends="build">
    <mkdir dir="${apr.lib.dir}/apr_obj"/>
    <cc name="${compiler}"
        outfile="${apr.lib.dir}/testall"
        subsystem="console"
        multithreaded="true"
        outtype="executable"
        objdir="${apr.lib.dir}/apr_obj"
        debug="${debug}">
        <fileset dir="${test.dir}" includes="*.c">
            <exclude name="nw_misc.c"/>
            <exclude name="testlockperf.c"/>
            <exclude name="occhild.c"/>
            <exclude name="sockchild.c"/>
            <exclude name="mockchild.c"/>
            <exclude name="readchild.c"/>
            <exclude name="globalmutexchild.c"/>
            <exclude name="tryread.c"/>
            <exclude name="proc_child.c"/>
            <exclude name="sendfile.c"/>
            <exclude name="testshmproducer.c"/>
            <exclude name="testshmconsumer.c"/>
            <exclude name="testmutexscope.c"/>
            <exclude name="testapp.c"/>
        </fileset>
        <includepath path="${apr.include.dir}"/>
        <defineset if="is-windows">
            <define name="WIN32" value="1"/>
        </defineset>
        <defineset define="_HAVE_CONFIG_H _REENTRANT _GNU_SOURCE" if="is-gcc"/>
        <compilerarg value="${pic-option}" if="pic-option"/>
        <libset dir="${apr.lib.dir}" libs="apr-1${lib-suffix}"/>
        <libset libs="cw32mt" if="is-bcc"/>
        <libset libs="pthread dl" if="is-unix"/>
        <libset libs="advapi32 ws2_32 mswsock rpcrt4" if="is-windows"/>
        <project type="${project.type}" outfile="${project.dir}/testall" if="project.if"/>
    </cc>
</target>

<target name="run-testall" depends="build-testall, build-mod_test, build-tryread, build-readchild, build-globalmutexchild, build-occhild, build-proc_child, build-testshmconsumer, build-testshmproducer, build-sockchild">
    <mkdir dir="${apr.lib.dir}/data"/>
    <copy todir="${apr.lib.dir}/data">
        <fileset dir="${test.dir}/data" includes="*"/>
    </copy>
    <exec executable="${apr.lib.dir}/testall"
          dir="${apr.lib.dir}"
          failonerror="true">
        <env key="DYLD_LIBRARY_PATH"
           value="${apr.lib.dir}:${apr.lib.dir}/.libs:${env.DYLD_LIBRARY_PATH}"/>
        <env key="LD_LIBRARY_PATH"
           value="${apr.lib.dir}:${apr.lib.dir}/.libs:${env.LD_LIBRARY_PATH}"/>
    </exec>
</target>



<target name="build-check"
     depends="build-testlockperf,
              build-testshmproducer,
              build-testshmconsumer,
              build-testmutexscope,
              build-testall"
     description="Builds all test applications"/>

<target name="check"
      depends="run-testlockperf,
               run-testall"
      description="Runs all test applications">
</target>

<target name="build-projects">
        <mkdir dir="${project.dir}"/>
        <antcall target="build">
                <param name="project.if" value="true"/>
                <param name="project.type" value="${project.type}"/>
                <param name="projects.dir" value="${project.dir}"/>
                <param name="projectsOnly" value="true"/>
        </antcall>
        <antcall target="build-check">
                <param name="project.if" value="true"/>
                <param name="project.type" value="${project.type}"/>
                <param name="projects.dir" value="${project.dir}"/>
                <param name="projectsOnly" value="true"/>
        </antcall>
</target>

<target name="build-projects-vc6" description="Builds project files for Microsoft Visual C++ 6">
    <antcall target="build-projects">
        <param name="project.dir" value="msvc"/>
        <param name="project.type" value="msvc6"/>
    </antcall>
</target>

<target name="build-projects-xcode" description="Builds project files for Apple Xcode">
    <antcall target="build-projects">
        <param name="project.dir" value="xcode"/>
        <param name="project.type" value="xcode"/>
    </antcall>
</target>

<target name="build-projects-cbx" description="Builds project files for Borland CBuilderX">
    <antcall target="build-projects">
        <param name="project.dir" value="cbx"/>
        <param name="project.type" value="cbuilderx"/>
    </antcall>
</target>



</project>
